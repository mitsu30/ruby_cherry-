def some_method
  <<-TEXT
  これはヒアドキュメントです。
  <<を使うと最後の識別子をインデントさせることができます。
  TEXT
end

def some_method
  <<~TEXT
  これはヒアドキュメントです。
  <<を使うと最後の識別子をインデントさせることができます。
  TEXT
end

def some_method
  <<~TEXT
  \ これはヒアドキュメントです。
  \ <<を使うと最後の識別子をインデントさせることができます。
  TEXT
end


name = 'Alice'
a = <<'TEXT'
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT

name = 'Alice'
a = <<TEXT
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT

a = 'Ruby'
a.prepend(<<TEXT)
Java
Python
TEXT
puts a


b = <<TEXT.upcase
Hello,
Good-bye,
TEXT
puts b

c = [<<TEXT1, <<TEXT2]
Alice
Bob
TEXT1
Matz
Junichi
TEXT2

sprintf('%0.3f', 1.2)

`このコードは、Rubyのsprintfメソッドを使用して、浮動小数点数を特定のフォーマットの文字列に変換しています。
具体的には、以下の点に注目してコードを解説します。

sprintfメソッド:

sprintfは、指定されたフォーマットに基づいて文字列を生成するメソッドです。
このメソッドは、String#%メソッドやKernel#printfメソッドと同様の機能を持っています。
フォーマット文字列'%0.3f':

%はプレースホルダーとして働きます。これに続くフォーマット指定子に基づいて、後の引数がどのようにフォーマットされるかを指定します。
0.3fは浮動小数点数をフォーマットするための指定子です。
0: 数値の前に0を付けて指定された幅に合わせることを意味します。この場合、幅の指定がないので、この0は実際には影響を与えません。
.3: 小数点以下を3桁で表示することを意味します。
f: 浮動小数点数を表示することを意味します。
第二引数1.2:

この浮動小数点数が、先述のフォーマット指定子に基づいてフォーマットされます。
このコードを実行すると、出力は"1.200"になります。1.2という数値が、小数点以下3桁でのフォーマットに変換され、最後の2つの桁は0で埋められて表示されます。`

'%0.3f' % 1.2

[10, 20, 30].join

'Hi!'*10

puts "\u41"
